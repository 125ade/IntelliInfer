version: '3.7'

name: intelliinfer

services:


  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: "api"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - logs_data:/app/logs
      - media_data:/app/media
      - secrets_data:/app/secrets
    expose:
      - "${API_PORT}"
    ports:
      - "${API_PORT}:${API_PORT}"
    restart: unless-stopped
    environment:
      - DOCKER_HOST=${DOCKER_HOST}
      - CONTAINER_IMAGE_NAME=${CONTAINER_IMAGE_NAME}
      - CONTAINER_TEST_NAME=${CONTAINER_TEST_NAME}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - DOKER_QUEUE_NAME=${DOKER_QUEUE_NAME}
      - API_PORT=${API_PORT}
      - API_HOST=${API_HOST}
      - API_SECRET_KEY_NAME=${API_SECRET_KEY_NAME}
      - API_PUBLIC_KEY_NAME=${API_PUBLIC_KEY_NAME}
      - INFERENCE_COST=${INFERENCE_COST}
      - TOKEN_EXPIRE=${TOKEN_EXPIRE}
      - TOKEN_ALGORITHM=${TOKEN_ALGORITHM}
      - API_SERVICE_NAME=${API_SERVICE_NAME}
      - DESTINATION_PATH_WEIGHTS=${DESTINATION_PATH_WEIGHTS}
      - FILE_WEIGHTS_EXTENSION=${FILE_WEIGHTS_EXTENSION}
      - SEQUELIZE_DIALECT=${SEQUELIZE_DIALECT}
      - SEQUELIZE_LOGGING=${SEQUELIZE_LOGGING}
      - NODE_ENV=${NODE_ENV}
      - LOG_OUTPUT=${LOG_OUTPUT} # Pu√≤ essere 'console', 'file' o 'both'
      - LOG_INTERVAL_ROTATION=${LOG_INTERVAL_ROTATION}
      - LOG_PATH=${LOG_PATH}
      - LOG_ACCESS_DIR=${LOG_ACCESS_DIR}
      - LOG_ERRORS_DIR=${LOG_ERRORS_DIR}
      - LOG_SEQUELIZE_DIR=${LOG_SEQUELIZE_DIR}
    networks:
      - private-ntwk
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://${API_HOST}:${API_PORT}/check/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3



  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: "database"
    hostname: "postgres"
    restart: always
    expose:
      - "${POSTGRES_PORT}"
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - private-ntwk
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 3s
      retries: 3



  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile.redis
    container_name: "redis"
    restart: always
    expose:
      - "${REDIS_PORT}"
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    networks:
      - private-ntwk
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3



#  yolo:
#    build:
#      context: ./neural_network/yolo
#      dockerfile: Dockerfile
#    container_name: "yolo"
#    command: /bin/true



  test:
    build:
      context: ./neural_network/test
      dockerfile: Dockerfile
    container_name: "test"
    volumes:
      - media_data:/app/media
    networks:
      - private-ntwk
    command: /bin/true


networks:
  private-ntwk:
    driver: bridge
    name: private-ntwk


volumes:
  redis_data:
  postgres_data:
  secrets_data:
  media_data:
    driver: local
  logs_data:
